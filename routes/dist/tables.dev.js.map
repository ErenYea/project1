{"version":3,"sources":["tables.js"],"names":["express","require","router","Router","mysql","mysqlConnection","createConnection","host","user","password","database","multipleStatements","connect","err","console","log","get","req","res","next","gettablenames","Promise","resolve","reject","query","rows","fields","getcolumndata","element","key","allfunct","tablenames","data","array_of_table","push","object_of_data","newarr","start","render","title","cond","module","exports"],"mappings":"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","sourcesContent":["var express = require(\"express\");\r\nvar router = express.Router();\r\nconst mysql = require(\"mysql\");\r\n\r\nvar mysqlConnection = mysql.createConnection({\r\n  host: \"localhost\",\r\n  user: \"root\",\r\n  password: \"loveisone\",\r\n  database: \"helloworld\",\r\n  multipleStatements: true,\r\n});\r\nmysqlConnection.connect((err) => {\r\n  if (err) {\r\n    console.log(\"Not seccess\", err);\r\n  } else {\r\n    console.log(\"sucess\");\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n  /* GET users listing. */\r\nrouter.get(\"/\", function (req, res, next) {\r\n  const gettablenames = () =>{\r\n  return new Promise((resolve,reject)=>{\r\n    mysqlConnection.query(\"show tables\",(err,rows,fields)=>{\r\n        if (err){\r\n          console.log(\"First Function\",err)\r\n          reject(err);\r\n        } else{\r\n          resolve(rows);\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  const getcolumndata = (element,key) =>{\r\n    return new Promise((resolve,reject)=>{\r\n      mysqlConnection.query(`SELECT * from ${element[key]}`,(err,rows,fields)=>{\r\n        if(err){\r\n          console.log(\"Second function\",err)\r\n          reject(err);\r\n        } else{\r\n          resolve(rows);\r\n        }\r\n      });\r\n    });\r\n  };\r\n  const allfunct = async () => {\r\n    var tablenames = [];\r\n    var data = [];\r\n    var array_of_table = await gettablenames();\r\n    // console.log(array_of_table);\r\n    for (element of array_of_table){\r\n      for (key in element){\r\n        // console.log(element[key]);\r\n        tablenames.push(element[key]);\r\n        var object_of_data = await getcolumndata(element,key);\r\n        data.push(object_of_data);\r\n        \r\n      }\r\n    }\r\n    // console.log(data)\r\n    // console.log(tablenames)\r\n    var newarr = [tablenames,data];\r\n    return newarr;\r\n  }\r\n  const start = async () => {\r\n    var newarr = await allfunct()\r\n    var tablenames = newarr[0]\r\n    var data = newarr[1]\r\n    // console.log(tablenames);\r\n    res.render(\"tables\", {\r\n        title: \"Express\",\r\n        data: data,\r\n        tablenames: tablenames,\r\n        cond:\"table\"\r\n    });\r\n  }\r\n  start();\r\n  \r\n  \r\n  \r\n  \r\n});\r\n\r\n  \r\n\r\n\r\nmodule.exports = router;\r\n"],"file":"tables.dev.js"}